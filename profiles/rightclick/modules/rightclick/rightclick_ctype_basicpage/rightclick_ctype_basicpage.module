<?php
/**
 * @file
 * Contains rightclick_ctype_basicpage.module
 */

use \Drupal\file\Entity\File;
use \Drupal\image\Entity\ImageStyle;

/*
 * Implements hook_preprocess_HOOK().
 * Add inline css style for background images
 */
function rightclick_ctype_basicpage_preprocess_field(&$variables) {
  /*
   * "field_high_slide_img"
   * add CSS classes and inline background images
   */
  if ($variables['field_name'] == 'field_basicpage_images') {

    /*
     * Add field Wrapper Class just in case there is multiple images
     */
    $variables['attributes']['class'][] = 'high-slide-imgs';

    foreach ($variables['items'] as $key => &$item) {
      /*
       * Get image(s) and URIs
       */
      $img_id = ($item['content']['#item']->getValue()['target_id']);
      $img_uri = File::load($img_id)->getFileUri();
      $mobile_uri = ImageStyle::load('hl_mobile')->buildUrl($img_uri);
      $tablet_uri = ImageStyle::load('hl_tablet')->buildUrl($img_uri);
      $desktop_uri = ImageStyle::load('hl_desktop')->buildUrl($img_uri);

      /*
       * Add class to field item container
       */
      $item['attributes']->addClass('high-slide-bgimg', 'bgimg-' . $img_id);

      /*
       * Add background images with inline css, in the header.
       * TODO: fix media queries
       */
      $css = '
        .high_slide_bgimg-' . $img_id . ' picture,
        .bgimg-' . $img_id . ' img{
          visibility: hidden
        }
        @media (max-width: 767px) {
          .bgimg-' . $img_id . ' {
            background-image: url(' . $mobile_uri . ');
          }
        }
        @media (min-width: 768px) and (max-width: 1023px) {
          .bgimg-' . $img_id . ' {
            background-image: url(' . $tablet_uri . ');
          }
        }
        @media (min-width: 1024px) {
          .bgimg-' . $img_id . ' {
            background-image: url(' . $desktop_uri . ');
          }
        }         
      ';

      $variables['#attached']['html_head'][] = [
        [
          '#tag' => 'style',
          /*      '#attributes' => [
                  'media' => $media_query
                ],*/
          '#value' => $css
        ],
        'bg_image_formatter_css_' . $img_id
      ];
    }
  }
}

/**
 * Implements hook_install().
 */
function rightclick_ctype_basicpage_install() {
  // Create temporary array to setup permissions per role
  $roles_with_permissions = array(
    'developer' => array(),
    'moderator' => array(
      'translate basicpage node',
      'create basicpage content on assigned domains',
      'delete basicpage content on assigned domains',
      'update basicpage content on assigned domains',
      'create basicpage content',
      'delete any basicpage content',
      'delete own basicpage content',
      'delete basicpage revisions',
      'edit any basicpage content',
      'edit own basicpage content',
      'revert basicpage revisions',
      'view basicpage revisions',
    ),
    'publisher_general' => array(),
    'publisher_hr' => array(),
    'publisher_pm' => array(),
    'publisher_marketing' => array(
      'translate basicpage node',
      'create basicpage content on assigned domains',
      'update basicpage content on assigned domains',
      'create basicpage content',
      'delete own basicpage content',
      'edit any basicpage content',
      'edit own basicpage content',
      'revert basicpage revisions',
      'view basicpage revisions',
    ),
  );

  // Add permissions to roles
  // See https://api.drupal.org/api/drupal/core%21modules%21user%21user.module/function/user_role_grant_permissions/8
  foreach ($roles_with_permissions as $roleid => $permissions) {
    user_role_grant_permissions($roleid, $permissions);
  }
}

