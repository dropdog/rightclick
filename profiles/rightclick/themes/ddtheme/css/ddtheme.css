/** Import sass modules. */
/** Import theme scss files. */
/** Breakpoint variables. */
/* The following declaration converts pxs to ems. */
/** Primary colors variables. */
/** Light primary colors variables. */
/** Secondary colors variables. */
/** Light secondary colors variables. */
/** Grayscale variables. */
/** White color variable. */
/** Base font color variable. */
/** Margin/padding variables. */
/** Modular Scale variables. */
/** Typography variables. */
/* Our custom mixins. */
/** Restrict the container. */
/** Custom mixin for adjusting line height. */
/** List with right paddings and margins and no list style. */
/** Color mixins. */
/** Use the following mixins for debugging. */
.demo-block { border: 1px solid #666; min-height: 3em; }

/** Helper Classes. */
.show { display: block !important; }

/** Classes used for fonts. */
.font-lighter { font-weight: lighter; }

.font-normal { font-weight: normal; }

.font-bold { font-weight: bold; }

/** Class used in bylines. */
.byline { font-size: 16px; line-height: 24px; font-style: italic; }

/** Classes used in addresses. */
.vcard { overflow: hidden; *zoom: 1; }

.vcard p { margin: 0; }

/** Classes used in layout. */
.constrained { max-width: 1200px; margin: 0 auto; padding: 0 0.5em; overflow: hidden; *zoom: 1; }

@media (min-width: 64em) { .primary-info { width: 49.15254%; float: left; margin-right: -100%; margin-left: 0; clear: none; } }

@media (min-width: 64em) { .secondary-info { width: 49.15254%; float: right; margin-left: 0; margin-right: 0; clear: none; } }

/** Class for leading paragraphs. */
.leading { font-size: 20px; line-height: 24px; color: #0061a0; }

/** Classes for our modular scale in the Styleguide. */
.ms10 { font-size: 52px; line-height: 56px; }

.ms9 { font-size: 46px; line-height: 48px; }

.ms8 { font-size: 41px; line-height: 48px; }

.ms7 { font-size: 36px; line-height: 40px; }

.ms6 { font-size: 32px; line-height: 32px; }

.ms5 { font-size: 29px; line-height: 32px; }

.ms4 { font-size: 26px; line-height: 32px; }

.ms3 { font-size: 23px; line-height: 24px; }

.ms2 { font-size: 20px; line-height: 24px; }

.ms1 { font-size: 18px; line-height: 24px; }

.ms0 { font-size: 16px; line-height: 24px; }

.ms-1 { font-size: 14px; line-height: 16px; }

.ms-2 { font-size: 13px; line-height: 16px; }

.ms-3 { font-size: 11px; line-height: 16px; }

.ms-4 { font-size: 10px; line-height: 16px; }

.ms-5 { font-size: 9px; line-height: 16px; }

.is-active { text-decoration: underline; }

/** Color classes. */
.base-color { color: #0061a0; }

.second-color { color: #fdb81f; }

.third-color { color: #1aa7df; }

/** Light color classes. */
.base-color-light { color: #d3eeff; }

.second-color-light { color: #fff8e9; }

.third-color-light { color: #ecf8fd; }

/** Background Color classes. */
.bg-base-color { background-color: #0061a0; }

.bg-second-color { background-color: #fdb81f; }

.bg-third-color { background-color: #1aa7df; }

/** Background light color classes. */
.bg-base-color-light { background-color: #d3eeff; }

.bg-second-color-light { background-color: #fff8e9; }

.bg-third-color-light { background-color: #ecf8fd; }

/** Secondary color classes. */
.info-color { color: #008fed; }

.success-color { color: #77b259; }

.warning-color { color: #fdb81f; }

.danger-color { color: #e62600; }

/** Light secondary color classes. */
.info-color-light { color: #edf8ff; }

.success-color-light { color: #e9f3e4; }

.warning-color-light { color: #fff8e9; }

.danger-color-light { color: #ffeae6; }

/** Secondary background color classes. */
.bg-info-color { background-color: #008fed; }

.bg-success-color { background-color: #77b259; }

.bg-warning-color { background-color: #fdb81f; }

.bg-danger-color { background-color: #e62600; }

/** Secondary light background color classes. */
.bg-info-color-light { background-color: #edf8ff; }

.bg-success-color-light { background-color: #e9f3e4; }

.bg-warning-color-light { background-color: #fff8e9; }

.bg-danger-color-light { background-color: #ffeae6; }

/** Background grayscale classes. */
.bg-gray-color { background-color: #a8a8a8; }

.bg-gray-color-light { background-color: #e0e0e0; }

.bg-gray-color-lighter { background-color: #e9e9e9; }

.bg-gray-color-dark { background-color: #7e7e7e; }

.bg-gray-color-darker { background-color: #2a2a2a; }

/** Text colors (classes for special cases). */
.text-white { color: #fff; }

.text-muted { opacity: 0.5; }

/** Text grayscale classes. */
.text-gray { color: #a8a8a8; }

.text-gray-light { color: #e0e0e0; }

.text-gray-lighter { color: #e9e9e9; }

.text-gray-dark { color: #7e7e7e; }

.text-gray-darker { color: #2a2a2a; }

.reset-list-style { list-style: none; }

/** Selected text. */
::selection { background: #0061a0; /* WebKit/Blink Browsers */ color: #fff; }

::-moz-selection { background: #0061a0; /* Gecko Browsers */ color: #fff; }

/** Classes for the details tag.. */
.details-wrapper { background-color: #f2faff; padding: 0.5em; color: #0061a0; }

/* Our custom mixins. */
/** Restrict the container. */
/** Custom mixin for adjusting line height. */
/** List with right paddings and margins and no list style. */
/** Color mixins. */
/** Use the following mixins for debugging. */
.demo-block { border: 1px solid #666; min-height: 3em; }

/** normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css Includes customizing. */
* { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }

/** 1. Set default font family to sans-serif. 2. Prevent iOS and IE text size adjust after device orientation change, without disabling user zoom. */
html { font-family: sans-serif; /* 1 */ -ms-text-size-adjust: 100%; /* 2 */ -webkit-text-size-adjust: 100%; /* 2 */ }

/** Remove default margin. */
body { margin: 0; color: #2a2a2a; }

/* HTML5 display definitions ========================================================================== */
/** Correct `block` display not defined for any HTML5 element in IE 8/9. Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox. Correct `block` display not defined for `main` in IE 11. */
details { cursor: pointer; }

article, aside, details, figcaption, footer, header, main, menu, nav, section, summary { display: block; }

figure { display: table; margin: 0; padding: 1em; }

figcaption { display: table-caption; caption-side: bottom; margin: 0; padding: 0 1em; }

/** 1. Correct `inline-block` display not defined in IE 8/9. 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera. */
audio, canvas, progress, video { display: inline-block; /* 1 */ vertical-align: baseline; /* 2 */ }

/** Prevent modern browsers from displaying `audio` without controls. Remove excess height in iOS 5 devices. */
audio:not([controls]) { display: none; height: 0; }

/** Address `[hidden]` styling not present in IE 8/9/10. Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22. */
[hidden], template { display: none; }

/* Links ========================================================================== */
/** Remove the gray background color from active links in IE 10. */
a { background-color: transparent; }

/** Improve readability of focused elements when they are also in an active/hover state. */
a:active, a:hover { outline: 0; }

/* Text-level semantics ========================================================================== */
/** Address styling not present in IE 8/9/10/11, Safari, and Chrome. */
abbr[title] { border-bottom: 1px dotted; }

/** Address style set to `bolder` in Firefox 4+, Safari, and Chrome. */
b, strong { font-weight: bold; }

/** Address styling not present in Safari and Chrome. */
dfn { font-style: italic; }

/** Address styling not present in IE 8/9. */
mark { background: #ff0; color: #000; }

/** Address inconsistent and variable font size in all browsers. */
small { font-size: 80%; }

/** Prevent `sub` and `sup` affecting `line-height` in all browsers. */
sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.5em; }

/* Embedded content ========================================================================== */
/** Remove border when inside `a` element in IE 8/9/10. */
img { border: 0; max-width: 100%; height: auto; margin-bottom: 1em; }

iframe { max-width: 100%; }

/** Correct overflow not hidden in IE 9/10/11. */
svg:not(:root) { overflow: hidden; }

/* Grouping content ========================================================================== */
/** Address differences between Firefox and other browsers. */
hr { box-sizing: content-box; height: 0; }

/** Contain overflow in all browsers. */
pre { overflow: auto; }

/** Address odd `em`-unit font size rendering in all browsers. */
dl code, kbd, pre, samp { font-family: monospace, monospace; font-size: 16px; line-height: 24px; }

/** Definition lists. */
dl { overflow: hidden; margin: 0.5em 0; }

dt { font-weight: bold; }

dd { margin-left: 0; }

/* Forms ========================================================================== */
/** 1. Correct color not being inherited. Known issue: affects color of disabled elements. 2. Correct font properties not being inherited. 3. Address margins set differently in Firefox 4+, Safari, and Chrome. */
button, input, optgroup, select, textarea { color: inherit; /* 1 */ font: inherit; /* 2 */ margin: 0; /* 3 */ }

/** Known limitation: by default, Chrome and Safari on OS X allow very limited styling of `select`, unless a `border` property is set. */
select { background: url(../images/icons/chevron-down.svg) no-repeat; background-position: 90% center; padding: 0.25em 1.5em 0.25em 0.5em; margin: 0 0 0.5em 0; display: inline-block; -webkit-appearance: none; -moz-appearance: none; appearance: none; cursor: pointer; height: 34px; background-color: #fff; color: #0061a0; border-radius: 0; border: 1px solid #0061a0; }

/** Address `overflow` set to `hidden` in IE 8/9/10/11. */
button { overflow: visible; text-transform: uppercase; }

/** Address inconsistent `text-transform` inheritance for `button` and `select`. All other form control elements do not inherit `text-transform` values. Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera. Correct `select` style inheritance in Firefox. */
select { text-transform: none; }

/** 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio` and `video` controls. 2. Correct inability to style clickable `input` types in iOS. 3. Improve usability and consistency of cursor style between image-type `input` and others. */
button, html input[type="button"], input[type="reset"], input[type="submit"] { -webkit-appearance: button; /* 2 */ cursor: pointer; /* 3 */ }

/** Re-set default cursor for disabled elements. */
button[disabled], html input[disabled] { cursor: default; }

/** Remove inner padding and border in Firefox 4+. */
button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; }

/** Address Firefox 4+ setting `line-height` on `input` using `!important` in the UA stylesheet. */
input { line-height: normal; }

/** It's recommended that you don't attempt to style these elements. Firefox's implementation doesn't respect box-sizing, padding, or width. 1. Address box sizing set to `content-box` in IE 8/9/10. 2. Remove excess padding in IE 8/9/10. */
input[type="checkbox"], input[type="radio"] { box-sizing: border-box; /* 1 */ padding: 0; /* 2 */ margin: 0; }

input::-webkit-clear-button { display: none; }

/** Fix the cursor style for Chrome's increment/decrement buttons. For certain `font-size` values of the `input`, it causes the cursor style of the decrement button to change from `default` to `text`. */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button { height: auto; }

/** 1. Address `appearance` set to `searchfield` in Safari and Chrome. */
input[type="search"] { -webkit-appearance: textfield; /* 1 */ }

/** Remove inner padding and search cancel button in Safari and Chrome on OS X. Safari (but not Chrome) clips the cancel button when the search input has padding (and `textfield` appearance). */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration { -webkit-appearance: none; }

/** Define consistent border, margin, and padding. */
fieldset { border: 0; padding: 0; margin: 0 0 1em 0; }

/** 1. Correct `color` not being inherited in IE 8/9/10/11. 2. Remove padding so people aren't caught out if they zero out fieldsets. */
legend { border: 0; /* 1 */ padding: 0; /* 2 */ }

/** Remove default vertical scrollbar in IE 8/9/10/11. */
textarea { overflow: auto; display: block; }

/** Don't inherit the `font-weight` (applied by a rule above). NOTE: the default cannot safely be changed in Chrome and Safari on OS X. */
optgroup { font-weight: bold; }

/* Tables ========================================================================== */
/** Remove most spacing between table cells. */
table { border-collapse: collapse; border-spacing: 0; margin: 0 0 1em 0; border-color: #fff; text-align: left; }

th, td { padding: 0.5em; border: 1px solid #fff; }

thead { background-color: #0061a0; color: #fff; }

tbody tr:nth-child(even) { background-color: #f2faff; }

tbody tr:nth-child(odd) { background-color: #e7f6ff; }

tfoot { background-color: #1aa7df; color: #fff; }

/* Lists ========================================================================== */
ul { padding: 0 0 0 1em; margin: 0 0 1em 0; text-decoration: none; }

ul ul { margin: 0 0 0 0; }

ul > li { position: relative; }

ol { padding: 0 0 0 1em; margin: 0 0 1em 0; text-decoration: none; }

ol ol { margin: 0 0 0 0; }

ol > li { position: relative; }

blockquote { display: block; -webkit-margin-before: 0.5em; -webkit-margin-after: 0.5em; -webkit-margin-start: 0.5em; -webkit-margin-end: 0.5em; margin: 0 2em 2em 2em; font-size: 20px; line-height: 24px; }

/** The arrow of the view source in the Styleguide. */
details { padding: 0; color: #FFF; font-weight: bold; display: inline-block; width: 100%; max-width: 100%; }

summary:before { content: "+"; color: #fff; display: inline-block; margin-right: 0.5em; font-weight: lighter; text-align: center; width: 16px; }

details[open] summary:before { content: "-"; }

summary { border: 1px solid #0061a0; width: 140px; background-color: #0061a0; color: #fff; padding: 0.25em 0.5em; }

summary::-webkit-details-marker { display: none; }

/* Time tag. ========================================================================== */
time { font-style: italic; }

/** Normalize Drupal. */
body { font-size: 16px; line-height: 24px; font-weight: lighter; }

p { margin: 0 0 1em 0; }

/* Typography ========================================================================== */
h1 { color: #0061a0; }

h1, h2, h3, h4, h5, h6 { text-transform: none; }

h1 { font-size: 41px; line-height: 48px; font-weight: normal; margin: 16px 0; }

h2 { font-size: 32px; line-height: 32px; font-weight: normal; margin: 16px 0; }

h3 { font-size: 26px; line-height: 32px; font-weight: normal; margin: 16px 0; }

h4 { font-size: 20px; line-height: 24px; font-weight: normal; margin: 8px 0; }

h5 { font-size: 16px; line-height: 24px; font-weight: bold; margin: 8px 0; }

h6 { font-size: 14px; line-height: 16px; font-weight: bold; margin: 4px 0; }

/* Various ========================================================================== */
label { padding-bottom: 0.5em; display: block; }

input[type=text], input[type=password], input[type=search], input[type=url], input[type=number], input[type=email], input[type=date], input[type=month], input[type=week], input[type=datetime], input[type=datetime-local], input[type=newsletter], input[type=submit], input.newsletter-field, textarea { border: 1px solid #a8a8a8; -webkit-appearance: none; -webkit-border-radius: 0; padding: 0.25em 1em; line-height: 24px; margin: 0.5em 0; -webkit-transition: box-shadow 0.30s ease-in-out; -moz-transition: box-shadow 0.30s ease-in-out; -ms-transition: box-shadow 0.30s ease-in-out; -o-transition: box-shadow 0.30s ease-in-out; }

input[type=text]:focus, input[type=password]:focus, input[type=search]:focus, input[type=url]:focus, input[type=number]:focus, input[type=email]:focus, input[type=date]:focus, input[type=month]:focus, input[type=week]:focus, input[type=datetime]:focus, input[type=datetime-local]:focus, input[type=newsletter]:focus, input[type=submit]:focus, input.newsletter-field:focus, textarea:focus { outline: none; box-shadow: inset 0 0 4px #0061a0; border: 1px solid #0061a0; }

input[type=submit], button { background-color: #0061a0; border: 1px solid #0061a0; padding: 0.25em 1em; margin: 0 0.5em 0 0; color: #FFF; font-weight: bold; -webkit-appearance: none; -webkit-border-radius: 0; }

input[type=submit]:hover, button:hover { background-color: #1aa7df; border: 1px solid #1aa7df; color: #fff; }

.visually-hidden { position: absolute !important; clip: rect(1px, 1px, 1px, 1px); overflow: hidden; height: 1px; width: 1px; word-wrap: normal; }

/** Debug Grid System BUG: with split and fixed gutters https://github.com/at-import/Singularity/issues/187 PATCH: https://github.com/at-import/Singularity/commit/c2ef7b6bcf7915ac460ab9021c3a743684ad4fe5 */
/** Debug Media queries */
.debug-media-query { margin: 0; padding: 0; }

.debug-media-query li { display: block; border: 1px solid #666; max-width: 160px; margin: 0 0 0.5em; padding: 0.5em; font-weight: bold; text-align: center; font-size: 14px; line-height: 16px; }

.debug-media-query .phone { background-color: #0061a0; }

@media (min-width: 48em) { .debug-media-query .tab { background-color: #0061a0; } }

@media (min-width: 64em) { .debug-media-query .desk { background-color: #0061a0; } }

@media (min-width: 20em) and (max-width: 48em) and (orientation: portrait) { .debug-media-query .phone-portrait { background-color: #0061a0; } }

@media (min-width: 20em) and (max-width: 48em) and (orientation: landscape) { .debug-media-query .phone-landscape { background-color: #0061a0; } }

@media screen and (min-width: 48em) and (max-width: 64em) and (orientation: portrait) { .debug-media-query .tab-portrait { background-color: #0061a0; } }

@media screen and (min-width: 48em) and (max-width: 64em) and (orientation: landscape) { .debug-media-query .tab-landscape { background-color: #0061a0; } }

/** Define the default grid, gutter and gutter style. */
/* The gutter is added as margin within the containers. */
/** Custom Accordion (see: http://codepen.io/abergin/pen/ihlDf). */
.accordion .transition, .accordion div.accordion-wrapper, .accordion ul li i:before, .accordion ul li i:after { transition: all 0.25s ease-in-out; }

.accordion div.accordion-wrapper { display: block; }

.accordion .flipIn, .accordion h1, .accordion ul li { animation: flipdown 0.5s ease both; }

.accordion li h2 { font-size: 20px; line-height: 24px; padding: 0.25em 0; text-transform: uppercase; background-color: #fff; color: #0061a0; border-radius: 0; border: 1px solid #0061a0; font-weight: bold; padding: 0.25em 1em; margin: 0; }

.accordion li:hover h2 { background-color: #0061a0; color: #fff; border-radius: 0; border-color: #0061a0; text-decoration: none; }

.accordion .no-select, .accordion h2 { -webkit-tap-highlight-color: transparent; -webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; }

.accordion div.accordion-wrapper { color: rgba(48, 69, 92, 0.8); font-size: 17px; line-height: 26px; letter-spacing: 1px; position: relative; overflow: hidden; max-height: 800px; opacity: 1; transform: translate(0, 0); margin-top: 14px; z-index: 2; }

.accordion ul { list-style: none; perspective: 900; padding: 0; margin: 0; }

.accordion ul li { position: relative; padding: 0; margin: 0; }

.accordion ul > li:before { display: none; }

.accordion ul li:nth-of-type(1) { animation-delay: 0.5s; }

.accordion ul li:nth-of-type(2) { animation-delay: 0.75s; }

.accordion ul li:nth-of-type(3) { animation-delay: 1s; }

.accordion ul li:last-of-type { padding-bottom: 0; }

.accordion ul li i { position: absolute; transform: translate(-6px, 0); margin-top: 16px; right: 0; display: none; }

.accordion ul li i:before, .accordion ul li i:after { content: ""; position: absolute; background-color: #ff6873; width: 3px; height: 9px; }

.accordion ul li i:before { transform: translate(-2px, 0) rotate(45deg); }

.accordion ul li i:after { transform: translate(2px, 0) rotate(-45deg); }

.accordion ul li input[type=checkbox] { position: absolute; cursor: pointer; width: 100%; height: 100%; z-index: 1; opacity: 0; }

.accordion ul li input[type=checkbox]:checked ~ div.accordion-wrapper { margin-top: 0; max-height: 0; opacity: 0; transform: translate(0, 50%); }

.accordion ul li input[type=checkbox]:checked ~ i:before { transform: translate(2px, 0) rotate(45deg); }

.accordion ul li input[type=checkbox]:checked ~ i:after { transform: translate(-2px, 0) rotate(-45deg); }

@keyframes flipdown { 0% { opacity: 0;
    transform-origin: top center;
    transform: rotateX(-90deg); }
  5% { opacity: 1; }
  80% { transform: rotateX(8deg); }
  83% { transform: rotateX(6deg); }
  92% { transform: rotateX(-3deg); }
  100% { transform-origin: top center;
    transform: rotateX(0deg); } }

/** Animations. */
.demo-animate { background: #ddd; padding: 1em; margin-bottom: 1em; text-align: center; }

.animate-fade:hover { opacity: 0; }

.animate-fade { -webkit-transition: opacity 0.3s ease-out; -moz-transition: opacity 0.3s ease-out; -ms-transition: opacity 0.3s ease-out; -o-transition: opacity 0.3s ease-out; transition: opacity 0.3s ease-out; }

.animate-fade:hover { opacity: 0; }

.animate-move { position: relative; }

.animate-move .demo-shape { position: absolute; top: 0; left: 0; bottom: 0; width: 20px; background: gray; -webkit-transition: all 0.8s ease-in-out; -moz-transition: all 0.8s ease-in-out; -ms-transition: all 0.8s ease-in-out; -o-transition: all 0.8s ease-in-out; transition: all 0.8s ease-in-out; }

.animate-move:hover .demo-shape { left: 100%; margin-left: -20px; }

/** Classes used in buttons. */
.btn, .btn.primary, .btn.secondary, .btn.success, .btn.warning, .btn.danger, .btn.disabled { background-color: #fff; color: #0061a0; border-radius: 0; border: 1px solid #0061a0; font-weight: bold; padding: 0.25em 1em; margin: 0 0.5em 0 0; display: inline-block; -webkit-appearance: none; -webkit-border-radius: 0; text-decoration: none; text-transform: uppercase; }

.btn:hover { background-color: #0061a0; color: #fff; border-radius: 0; border-color: #0061a0; text-decoration: none; }

.primary.btn { background-color: #0061a0; border: 1px solid #0061a0; color: #fff; }

.primary.btn:hover { background-color: #fff; border: 1px solid #0061a0; color: #0061a0; }

.secondary.btn { background-color: #1aa7df; border: 1px solid #1aa7df; color: #fff; }

.secondary.btn:hover { background-color: #0061a0; border-color: #fff; color: #fff; }

.success.btn { background-color: #e9f3e4; color: #e9f3e4; border-color: #e9f3e4; }

.success.btn:hover { background-color: #e9f3e4; color: #e9f3e4; border-color: #e9f3e4; }

.warning.btn { background-color: #fff8e9; color: #fff8e9; border-color: #fff8e9; }

.warning.btn:hover { color: #fff8e9; background-color: #fff8e9; border-color: #fff8e9; }

.danger.btn { background-color: #ffeae6; color: #ffeae6; border-color: #ffeae6; }

.danger.btn:hover { color: #ffeae6; background-color: #ffeae6; border-color: #ffeae6; }

.disabled.btn { background-color: #e0e0e0; border: 1px solid #e0e0e0; color: #fff; }

.disabled.btn:hover { background-color: #e0e0e0; border: 1px solid #e0e0e0; color: #fff; }

/** Dropbutton default. */
.js .dropbutton-wrapper { min-height: 2.125em; }

.js td .dropbutton-multiple .dropbutton-widget { width: 100%; }

.js .dropbutton-multiple .dropbutton-widget { border: 1px solid #0061a0; /** General styles for all dropbuttons. */ }

.js .dropbutton-multiple .dropbutton-widget a, .js .dropbutton-multiple .dropbutton-widget input { padding: 0.25em 0.5em; text-decoration: none; font-weight: normal; }

.js .dropbutton-multiple .dropbutton-widget button { padding: 0; font-weight: normal; border: none; }

/** The ul surrounding everything. */
.dropbutton { /** The first li. The one we see by default. */ /** The li that contains the the arrow button, that is, the right "column" of the dropbutton. */ /** All the secondary, hidden lis. */ }

.dropbutton .dropbutton-action a { background-color: #0061a0; color: #fff; }

.dropbutton .dropbutton-toggle button { background-color: #0061a0; color: #fff; }

.dropbutton .dropbutton-action.secondary-action a { background-color: #fff; color: #0061a0; }

.dropbutton .dropbutton-action.secondary-action a:hover { background-color: #0061a0; color: #fff; }

/** Dropbutton primary. */
.js .dropbutton-multiple.primary .dropbutton-widget { border: 1px solid #0061a0; }

.js .dropbutton-multiple.primary .dropbutton-widget .dropbutton .dropbutton-action a { background-color: #fff; color: #0061a0; }

.js .dropbutton-multiple.primary .dropbutton-widget .dropbutton .dropbutton-toggle button { background-color: #fff; color: #0061a0; }

.js .dropbutton-multiple.primary .dropbutton-widget .dropbutton .dropbutton-action.secondary-action a { background-color: #0061a0; color: #fff; }

.js .dropbutton-multiple.primary .dropbutton-widget .dropbutton .dropbutton-action.secondary-action a:hover { background-color: #fff; color: #0061a0; }

/** Dropbutton secondary. */
.js .dropbutton-multiple.secondary .dropbutton-widget { border: 1px solid #1aa7df; }

.js .dropbutton-multiple.secondary .dropbutton-widget .dropbutton .dropbutton-action a { background-color: #1aa7df; color: #fff; }

.js .dropbutton-multiple.secondary .dropbutton-widget .dropbutton .dropbutton-toggle button { background-color: #1aa7df; color: #fff; }

.js .dropbutton-multiple.secondary .dropbutton-widget .dropbutton .dropbutton-action.secondary-action a { background-color: #fff; color: #1aa7df; }

.js .dropbutton-multiple.secondary .dropbutton-widget .dropbutton .dropbutton-action.secondary-action a:hover { background-color: #1aa7df; color: #fff; }

/** Dropbutton disabled. */
.js .dropbutton-multiple.disabled .dropbutton-widget { border: 1px solid #e9e9e9; /* Disable any click events. */ }

.js .dropbutton-multiple.disabled .dropbutton-widget li { pointer-events: none; cursor: default; }

.js .dropbutton-multiple.disabled .dropbutton-widget .dropbutton .dropbutton-action a { background-color: #e9e9e9; color: #fff; }

.js .dropbutton-multiple.disabled .dropbutton-widget .dropbutton .dropbutton-toggle button { background-color: #e9e9e9; color: #fff; }

/** Custom Tabs (see: http://www.sevensignature.com/blog/code/responsive-pure-css-tabs/). */
.tab_container { width: 100%; margin: 0 auto; padding-top: 2px; position: relative; }

.tab_container input, .tab_container section { clear: both; padding-top: 10px; display: none; }

.tab_container label { display: block; float: left; width: 20%; padding: 0.5em; color: #757575; cursor: pointer; text-decoration: none; text-align: center; background: #e9e9e9; border: 1px solid #e9e9e9; font-weight: bold; line-height: 16px; }

.tab_container label:hover { box-shadow: inset 0 3px #1aa7df; background: #e0e0e0; }

.tab_container #tab1:checked ~ #content1, .tab_container #tab2:checked ~ #content2, .tab_container #tab3:checked ~ #content3, .tab_container #tab4:checked ~ #content4, .tab_container #tab5:checked ~ #content5 { display: block; padding: 20px; background: #fff; border-bottom: 2px solid #f0f0f0; }

.tab_container [id^="tab"]:checked + label { background: #fff; box-shadow: inset 0 3px #0061a0; border: 1px solid #fff; }

.tab_container [id^="tab"]:checked + label .fa { color: #0CE; }

@media only screen and (max-width: 930px) { label span { font-size: 14px; } }

@media only screen and (max-width: 768px) { .tab_container { width: 98%; } }

@keyframes fadeInScale { 0% { transform: scale(0.9);
    opacity: 0; }
  100% { transform: scale(1);
    opacity: 1; } }

/** Visibility Classes */
.hide-small { visibility: hidden; }

@media (min-width: 48em) { .hide-small { visibility: visible; } }

@media (min-width: 48em) { .hide-med { visibility: hidden; } }

@media (min-width: 64em) { .hide-med { visibility: visible; } }

@media (min-width: 64em) { .hide-large { visibility: hidden; } }

/** Wysiwyg Classes */
@media (min-width: 48em) { /** Classes used in the CKEditor for Text columns. */
  .text-2-col { margin: 0 auto; -webkit-column-count: 2; -moz-column-count: 2; -ms-column-count: 2; -o-column-count: 2; column-count: 2; -webkit-column-gap: 4em; -moz-column-gap: 4em; -ms-column-gap: 4em; -o-column-gap: 4em; column-gap: 4em; -webkit-column-rule-width: 1px; -moz-column-rule-width: 1px; -ms-column-rule-width: 1px; -o-column-rule-width: 1px; column-rule-width: 1px; }
  .text-2-col p, .text-2-col ul, .text-2-col ol { margin-top: 0; }
  .text-3-col { margin: 0 auto; -webkit-column-count: 3; -moz-column-count: 3; -ms-column-count: 3; -o-column-count: 3; column-count: 3; -webkit-column-gap: 4em; -moz-column-gap: 4em; -ms-column-gap: 4em; -o-column-gap: 4em; column-gap: 4em; -webkit-column-rule-width: 1px; -moz-column-rule-width: 1px; -ms-column-rule-width: 1px; -o-column-rule-width: 1px; column-rule-width: 1px; }
  .text-3-col p, .text-3-col ul, .text-3-col ol { margin-top: 0; }
  .text-3-col ul { padding-left: 0; }
  /** Classes used in the CKEditor for Block columns. */
  .block-1-2-col { overflow: hidden; *zoom: 1; }
  .block-1-2-col > div { width: 25%; float: left; margin-right: -100%; clear: none; padding-right: 1em; }
  .block-1-2-col div:nth-of-type(2) { width: 75%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; }
  .block-2-1-col { overflow: hidden; *zoom: 1; }
  .block-2-1-col > div { width: 75%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; }
  .block-2-1-col div:nth-of-type(2) { width: 25%; float: left; margin-right: -100%; clear: none; padding-right: 1em; }
  .block-2-col { overflow: hidden; *zoom: 1; }
  .block-2-col > div { width: 50%; float: left; margin-right: -100%; clear: none; padding-right: 1em; }
  .block-2-col div:nth-of-type(2) { width: 50%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; }
  .block-3-col { overflow: hidden; *zoom: 1; }
  .block-3-col > div { width: 33.33333%; float: left; margin-right: -100%; clear: none; padding-right: 1em; }
  .block-3-col div:nth-of-type(2) { width: 33.33333%; float: left; margin-right: -100%; margin-left: 33.33333%; clear: none; padding-right: 1em; }
  .block-3-col div:nth-of-type(3) { width: 33.33333%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; } }

/** Tabs. */
.is-collapse-enabled .tabs, .is-horizontal .tabs { position: relative; }

.is-horizontal .tabs:before { content: ''; display: block; background-color: #a8a8a8; height: 1px; position: absolute; bottom: 0; left: 0; z-index: 10; right: 0; }

/* Span the full width of the viewport */
.content-header .is-horizontal .tabs:before, .content-header .is-collapse-enabled .tabs:before { left: -2.5em; right: -2.5em; }

/** Tab 1. Required by some elements such as <button> 2. Fixed height needed to ensure alignment with absolutely-positioned active tab. */
.tabs__tab { position: relative; display: block; overflow: hidden; box-sizing: border-box; margin: -1px 0 0; padding: 9px 2em 7px 1em; /* LTR */ width: 100%; /* 1 */ border: 1px solid #a8a8a8; background-color: #e9e9e9; color: #0061a0; text-overflow: ellipsis; white-space: nowrap; }

[dir="rtl"] .tabs__tab { padding-left: 2em; padding-right: 1em; }

.tabs__tab:hover, .tabs__tab:focus { color: #008ee6; background-color: #e0e0e0; }

li.tabs__tab { display: block; padding: 0; }

/* This is required to win over specifity of [dir="rtl"] .tabs__tab */
[dir="rtl"] li.tabs__tab { padding-left: 0; padding-right: 0; }

li.tabs__tab a { padding: 0.5em; /* LTR */ color: #2a2a2a; display: inline-block; line-height: 20px; }

[dir="rtl"] li.tabs__tab a { padding-left: 2em; padding-right: 1em; }

.tabs a:hover, .tabs a:focus { text-decoration: none; }

/* Primary tabs */
.tabs.primary { clear: both; margin: 1rem 0 0; }

.tabs.primary .tabs__tab.is-active { z-index: 15; border-color: #a8a8a8; background-color: #fff; }

[dir="rtl"] .tabs.primary .tabs__tab.is-active { border-top-left-radius: 0; border-top-right-radius: 4px; }

.tabs.primary a { background: none; }

.tabs.primary a:focus { color: #008ee6; background-color: #fafaf7; text-decoration: underline; }

.tabs.primary .is-active a:focus { background: none; text-decoration: underline; }

/* Only add the arrow if there's space */
@media screen and (min-width: 18.75em) { /* 300px */
  .tabs.primary .tabs__tab a { padding-top: 7px; padding-bottom: 7px; }
  .tabs.primary .tabs__tab.is-active a { background-image: none; color: #0061a0; } }

.tabs__trigger { display: none; }

/* JS dependent styling */
.is-collapse-enabled .tabs__trigger { box-sizing: content-box; display: block; position: absolute; z-index: 10; right: 0; /* LTR */ top: 2px; left: auto; /* LTR */ width: 25%; padding-right: 4px; padding-left: 4px; border: 1px solid #a8a8a8; font-size: 1.25em; letter-spacing: 0.1em; text-align: center; outline: 0; line-height: 20px; padding-top: 7px; padding-bottom: 7px; }

[dir="rtl"] .is-collapse-enabled .tabs__trigger { border-right: 0; border-left: 1px solid #bfbfbf; border-radius: 4px 0 0 0; right: auto; left: 0; }

.is-collapse-enabled .tabs { padding-top: 5px; max-height: 0; }

.is-collapse-enabled .tabs.is-open { padding-top: 37px; }

.tabs.is-open { max-height: 999em; padding-bottom: 1rem; }

.is-collapse-enabled .tabs__tab.is-active { position: absolute; top: 2px; left: 0; /* LTR */ width: 75%; }

[dir="rtl"] .is-collapse-enabled .tabs__tab.is-active { left: auto; right: 0; }

.is-collapse-enabled .tabs.primary a.is-active:before { content: none; }

.is-open .tabs__tab.is-active { border-color: #a6a6a6; background-color: #ffffff; color: #004f80; }

/* Styles for the horizontal state always take priority */
.is-horizontal .tabs { max-height: none !important; padding-top: 0 !important; overflow: visible; }

.is-horizontal .tabs__tab { float: left; /* LTR */ height: auto; width: auto; margin: 0; text-align: center; border-bottom: none; border-bottom-color: #a6a6a6; }

[dir="rtl"] .is-horizontal .tabs__tab { float: right; /* This is required to win over specifity of [dir="rtl"] .tabs > li */ margin-left: 0; }

.is-horizontal .tabs__tab + .tabs__tab { margin-left: -1px; /* LTR */ }

[dir="rtl"] .is-horizontal .tabs__tab + .tabs__tab { margin-left: 0; margin-right: -1px; }

.is-horizontal .tabs.primary .tabs__tab:first-child { border-radius: 4px 0 0 0; /* LTR */ }

[dir="rtl"] .is-horizontal .tabs.primary .tabs__tab:first-child { border-radius: 0 4px 0 0; }

.is-horizontal .tabs.primary .tabs__tab:last-child { border-radius: 0 4px 0 0; /* LTR */ }

[dir="rtl"] .is-horizontal .tabs.primary .tabs__tab:last-child { border-radius: 4px 0 0 0; }

/* Override the states above */
.is-horizontal .tabs__tab.is-active, .is-horizontal .tabs.primary .tabs__tab.is-active, [dir="rtl"] .is-horizontal .tabs.primary .tabs__tab.is-active { border-radius: 4px 4px 0 0; position: relative; width: auto; top: 0; border-bottom: 0; margin: 0 -4px; }

.is-horizontal .tabs.primary a { background-image: none; padding: 7px 2em 7px 2em; }

.is-horizontal .tabs__trigger { display: none; }

/* Secondary tabs */
.tabs.secondary { display: block; margin-top: 1rem; }

.tabs.secondary .tabs__tab { display: block; padding: 5px 15px 5px 16px; /* LTR */ margin-left: -1px; /* LTR */ color: #0074bd; -webkit-transition: border-color 0.2s, background-color 0.2s; transition: border-color 0.2s, background-color 0.2s; }

[dir="rtl"] .tabs.secondary .tabs__tab { padding-left: 15px; padding-right: 16px; margin-left: 0; margin-right: -1px; }

/* This is required to win over specificity of [dir="rtl"] .tabs.secondary .tabs__tab */
[dir="rtl"] .views-displays .tabs.secondary li, [dir="rtl"] .views-displays .tabs.secondary li.is-active { padding-left: 0; padding-right: 0; }

.tabs.secondary .tabs__tab + .tabs__tab { border-top: 1px solid #d9d8d4; }

.tabs.secondary .tabs__tab.is-active { color: #004f80; border-left: 2px solid #004f80; /* LTR */ padding-left: 15px; /* LTR */ }

[dir="rtl"] .tabs.secondary .tabs__tab.is-active { border-left: 1px solid #bfbfbf; border-right: 2px solid #004f80; padding-right: 15px; }

/* This is required to win over specificity of [dir="rtl"] .tabs.secondary .tabs__tab.is-active */
[dir="rtl"] .views-displays .tabs.secondary li.is-active { border: 0 none; padding-right: 0; }

.tabs.secondary .tabs__tab:hover, .tabs.secondary .tabs__tab:focus { color: #008ee6; border-left: 2px solid #008ee6; /* LTR */ padding-left: 15px; /* LTR */ }

[dir="rtl"] .tabs.secondary .tabs__tab:hover, [dir="rtl"] .tabs.secondary .tabs__tab:focus { border-left: 1px solid #bfbfbf; border-right: 2px solid #008ee6; padding-right: 15px; }

/* This is required to win over specificity of [dir="rtl"] .tabs.secondary .tabs__tab:hover */
[dir="rtl"] .views-displays .tabs li.tabs__tab:hover { border: 0 none; padding-right: 0; }

.tabs.secondary a { background-color: transparent; padding: 7px 13px 5px; text-decoration: none; }

/* This is required to win over specificity of [dir="rtl"] li.tabs__tab a */
[dir="rtl"] .tabs.secondary a { padding-left: 13px; padding-right: 13px; }

/* This is required to win over specificity of [dir="rtl"] .tabs.secondary a */
[dir="rtl"] .views-displays .tabs.secondary a { padding-left: 7px; padding-right: 7px; }

.tabs.secondary .is-active a { color: #004f80; }

.tabs.secondary a:focus { text-decoration: underline; }

/* Styles for the horizontal state */
.is-horizontal .tabs.secondary .tabs__tab { background: none; float: left; /* LTR */ position: relative; top: 0; z-index: 15; margin-left: 1em; margin-right: 1em; border-bottom: 2px solid transparent; border-left: 1px solid transparent; /* LTR */ border-right-color: transparent; /* LTR */ border-top: 0; padding: 0; }

/** 1. This is required to win over specifity of [dir="rtl"] .tabs.secondary .tabs__tab:hover, [dir="rtl"] .tabs.secondary .tabs__tab:focus */
[dir="rtl"] .is-horizontal .tabs.secondary .tabs__tab { float: right; border-right: 1px solid transparent; border-left-color: transparent; padding-right: 0; /* 1 */ }

.is-horizontal .tabs.secondary .tabs__tab.is-active { border-bottom-color: #004f80; }

.is-horizontal .tabs.secondary .tabs__tab:hover, .is-horizontal .tabs.secondary .tabs__tab:focus { border-bottom-color: #008ee6; }

/** Breadcrumbs. */
#block-ddtheme-breadcrumbs ol { margin: 0; padding: 0; border: 0; overflow: hidden; *zoom: 1; }

#block-ddtheme-breadcrumbs ol li { list-style-image: none; list-style-type: none; margin-left: 0; white-space: nowrap; display: inline; float: left; padding-left: 4px; padding-right: 4px; }

#block-ddtheme-breadcrumbs ol li:first-child, #block-ddtheme-breadcrumbs ol li.first { padding-left: 0; }

#block-ddtheme-breadcrumbs ol li:last-child { padding-right: 0; }

#block-ddtheme-breadcrumbs ol li.last { padding-right: 0; }

#block-ddtheme-breadcrumbs ol li a:after { content: ">"; padding-left: 0.3em; }

#block-ddtheme-breadcrumbs ol li:last-child a:after { content: none; padding-left: 0; }

/** Local Tasks. */
/** Main Navigation. */
.menu--main { /* ---------- Primary Menu Toggle ----------- */ /* Hide the toggle by default. */ /* Unhide it for the primary menu. */ /** Media queries for primary menu. */ }

.menu--main .menu { padding: 0; text-align: left; /* LTR */ }

.menu--main .menu-item { float: none; list-style: none; margin: 0; padding: 0; height: auto; width: 100%; }

.menu--main .menu a { float: none; display: block; text-decoration: none; }

.menu--main .menu-toggle, .menu--main .menu-toggle-target { display: none; }

.menu--main .menu-toggle-target { display: inherit; position: fixed; top: 0; }

.menu--main .menu-toggle { float: none; display: block; text-decoration: none; z-index: 1000; }

.menu--main .menu-toggle:after { content: ""; background: url(../images/icons/hamburger.svg) no-repeat; background-size: contain; width: 22px; height: 22px; display: inline-block; position: absolute; right: 10px; /* LTR */ }

.menu--main .menu-toggle-target-show:target ~ .menu-toggle, .menu--main .menu-toggle--hide { display: none; }

.menu--main .menu-toggle-target-show:target ~ .menu-toggle--hide { display: block; }

.menu--main .menu-item { height: 0; overflow: hidden; }

.menu--main .menu-toggle-target-show:target ~ .menu .menu-item { height: auto; overflow: visible; }

@media all and (min-width: 901px) { .menu--main .menu-item { float: left; /* LTR */ list-style: none; width: auto; height: auto; overflow: visible; }
  .menu--main .menu a { float: left; /* LTR */ padding: 0.5em; }
  .menu--main .menu-toggle { display: none; } }

/** Pagenation. */
.pager .pager__items { margin: 0; padding: 0; border: 0; overflow: hidden; *zoom: 1; }

.pager .pager__items li { list-style-image: none; list-style-type: none; margin-left: 0; white-space: nowrap; display: inline; float: left; padding-left: 4px; padding-right: 4px; }

.pager .pager__items li:first-child, .pager .pager__items li.first { padding-left: 0; }

.pager .pager__items li:last-child { padding-right: 0; }

.pager .pager__items li.last { padding-right: 0; }

/** User Menu. */
.menu--account ul.menu { margin: 0; padding: 0; border: 0; overflow: hidden; *zoom: 1; }

.menu--account ul.menu li { list-style-image: none; list-style-type: none; margin-left: 0; white-space: nowrap; display: inline; float: right; padding-left: 4px; padding-right: 4px; }

.menu--account ul.menu li:first-child, .menu--account ul.menu li.first { padding-right: 0; }

.menu--account ul.menu li:last-child { padding-left: 0; }

.menu--account ul.menu li.last { padding-left: 0; }

/** Language switcher. */
.language-switcher-language-url { margin: 0; padding: 0; border: 0; overflow: hidden; *zoom: 1; }

.language-switcher-language-url li { list-style-image: none; list-style-type: none; margin-left: 0; white-space: nowrap; display: inline; float: right; padding-left: 4px; padding-right: 4px; }

.language-switcher-language-url li:first-child, .language-switcher-language-url li.first { padding-right: 0; }

.language-switcher-language-url li:last-child { padding-left: 0; }

.language-switcher-language-url li.last { padding-left: 0; }

/** Drupal comments */
.comment { overflow: hidden; *zoom: 1; margin: 0 0 1em 0; }

.comment nav ul { margin: 0; padding: 0; border: 0; overflow: hidden; *zoom: 1; }

.comment nav ul li { list-style-image: none; list-style-type: none; margin-left: 0; white-space: nowrap; display: inline; float: left; padding-left: 4px; padding-right: 4px; }

.comment nav ul li:first-child, .comment nav ul li.first { padding-left: 0; }

.comment nav ul li:last-child { padding-right: 0; }

.comment nav ul li.last { padding-right: 0; }

@media (min-width: 64em) { .comment .comment__header { width: 16.66667%; float: left; margin-right: -100%; clear: none; padding-right: 1em; padding-left: 0; }
  .comment .comment__content { width: 83.33333%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; } }

/** Class used in the outer div of nested comments. */
.indented { margin-left: 2em; }

/** Class provided by Drupal for the labels of checkboxes abd radiobuttons. */
.option { display: inline-block; padding-left: 1em; }

/** Form Classes. */
input[type=text].is-valid { border-color: #e9f3e4; color: #e9f3e4; }

input[type=text].is-error { border-color: #ffeae6; color: #ffeae6; }

/** Region Bottom. */
.bottom { overflow: hidden; *zoom: 1; }

/** Region Footer. */
/** Region Header. */
.header { overflow: visible; }

@media (min-width: 64em) { .header .site-branding { width: 25%; float: left; margin-right: -100%; clear: none; padding-right: 1em; } }

@media (min-width: 64em) { .header .menu--account { width: 75%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; margin: 0 0.5em; } }

@media (min-width: 64em) { .header .language-switcher-language-url { width: 75%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; } }

@media (min-width: 64em) { .header .menu--main { width: 100%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; clear: both; } }

/** Region Hero. */
.hero { clear: both; overflow: hidden; *zoom: 1; }

/** Region Highlighted. */
.highlighted { clear: both; }

/** Region Left sidebar. */
.layout-sidebar-first { /** Specify grid for resolutions bigger than 48em (Mobile first) --- OVERRIDE */ }

@media (min-width: 64em) { .layout-sidebar-first { width: 25%; float: left; margin-right: -100%; clear: none; padding-right: 1em; } }

/** Region Main content. */
.main { clear: both; }

/** Clear Grid at devices smaller than $desk */
.layout-two-sidebars .layout-content { /** Specify grid for resolutions bigger than $desk (Mobile first) --- OVERRIDE */ }

@media (min-width: 64em) { .layout-two-sidebars .layout-content { width: 50%; float: left; margin-right: -100%; margin-left: 25%; clear: none; padding-right: 1em; } }

.layout-with-sidebar-first .layout-content { /** Specify grid for resolutions bigger than $desk (Mobile first) --- OVERRIDE */ }

@media (min-width: 64em) { .layout-with-sidebar-first .layout-content { width: 75%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; } }

.layout-with-sidebar-second .layout-content { /** Specify grid for resolutions bigger than $desk (Mobile first) --- OVERRIDE */ }

@media (min-width: 64em) { .layout-with-sidebar-second .layout-content { width: 75%; float: left; margin-right: -100%; clear: none; padding-right: 1em; } }

/** Clear Grid at devices smaller than $desk */
.layout-no-sidebars .layout-content { width: 100%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; }

/** Page Main content. */
/** Region Right sidebar. */
.layout-sidebar-secondtop { /** Specify grid for resolutions bigger than 48em (Mobile first) --- OVERRIDE */ }

@media (min-width: 64em) { .layout-sidebar-secondtop { width: 25%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; } }

aside.layout-sidebar-secondbottom { /** Specify grid for resolutions bigger than 48em (Mobile first) --- OVERRIDE */ }

@media (min-width: 64em) { aside.layout-sidebar-secondbottom { width: 25%; float: right; margin-left: 0; margin-right: 0; clear: none; padding-right: 0; clear: right; } }

/*# sourceMappingURL=data:application/json;base64, */
